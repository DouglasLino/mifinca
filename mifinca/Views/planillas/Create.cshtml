@model mifinca.Models.planilla

@{
    ViewBag.Title = "Create";
}

<h2>Crear planilla</h2>

<style>
    .none {
        display: none;
    }
</style>

@*@using (Html.BeginForm())*@
@using (Html.BeginForm("Create", "planillas", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group mb-3 d-none">
        @Html.LabelFor(model => model.id_empleado, "Nombre del empleado", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("id_empleado", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.id_empleado, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group mb-3">
        @Html.LabelFor(model => model.id_finca, "Nombre de la finca", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @* lo muestro pero no se envia *@
            @Html.DropDownList("id_finca", null, htmlAttributes: new { @class = "form-control", @disabled = "disabled" })
            @* no se muestra pero si se envia *@
            @Html.DropDownList("id_finca", null, htmlAttributes: new { @class = "form-control none" })
            @Html.ValidationMessageFor(model => model.id_finca, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group mb-3">
        @Html.LabelFor(model => model.fecha_resolucion, "Fecha de resolución", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.fecha_resolucion, new { htmlAttributes = new { @class = "form-control" , autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.fecha_resolucion, "", new { @class = "text-danger" })
        </div>
        <script>
                    const elem = document.querySelector('input[name="fecha_resolucion"]');
                    const datepicker = new Datepicker(elem, {
                        format: "yyyy/mm/dd"
                    });
        </script>
    </div>

    <div class="form-group mb-3">
        @Html.LabelFor(model => model.csv_planilla, "CSV de la planilla", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBox("insert_csv_planilla", "", new { type = "file", accept = ".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel", @class = "form-control" }) <br />
            
            @*@Html.EditorFor(model => model.csv_planilla, new { htmlAttributes = new { @class = "form-control d-none" } })*@
            @*@Html.ValidationMessageFor(model => model.csv_planilla, "", new { @class = "text-danger" })*@
        </div>
    </div>

    @*<div class="form-group mb-3">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>*@
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Crear" class="btn btn-success btn-lg input-block-level form-control mb-2" />
            @Html.ActionLink("Salir sin crear", "Index", new { area = "" }, new { @class = "btn btn-danger btn-lg d-flex justify-content-center" })
        </div>
    </div>
</div>
}

@*<div>
        @Html.ActionLink("Back to List", "Index")
    </div>*@

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

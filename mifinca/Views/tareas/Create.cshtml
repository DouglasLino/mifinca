@model mifinca.Models.tarea

@{
    ViewBag.Title = "Create";
}

<style>
   
</style>

<h2>Crear tarea</h2>

<script src="https://unpkg.com/html5-qrcode" type="text/javascript"></script>

<div id="reader" width="600px"></div>

<script>

    
    function onScanSuccess(decodedText, decodedResult) {
        // handle the scanned code as you like, for example:
        
        console.log(`Code matched = ${decodedText}`);
        document.getElementById("code_select").value = decodedText;

        
    }

    function onScanFailure(error) {
        // handle scan failure, usually better to ignore and keep scanning.
        // for example:
        //console.warn(`Code scan error = ${error}`);
    }

    let html5QrcodeScanner = new Html5QrcodeScanner(
        "reader",
        { fps: 10, qrbox: { width: 250, height: 250 } },
  /* verbose= */ false);
    html5QrcodeScanner.render(onScanSuccess, onScanFailure);

    document.getElementById("html5-qrcode-anchor-scan-type-change").style.visibility = "hidden";
    document.getElementById("html5-qrcode-button-camera-permission").innerHTML = "Escanear código QR del empleado";

</script>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    
<div class="form-horizontal mt-5">

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group mb-3">
        @Html.LabelFor(model => model.id_empleado, "Nombre del empleado", htmlAttributes: new { @class = "control-label" })
        <div class="col-md-10">
            @Html.DropDownList("id_empleado", null, htmlAttributes: new { @class = "form-control", @id = "code_select" })
            @Html.ValidationMessageFor(model => model.id_empleado, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group mb-3">
        @Html.LabelFor(model => model.id_tipo, "Tipo de tarea", htmlAttributes: new { @class = "control-label " })
        <div class="col-md-10">
            @Html.DropDownList("id_tipo", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.id_tipo, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group mb-3">
        @Html.LabelFor(model => model.fecha_inicio, "Fecha Inicio", htmlAttributes: new { @class = "control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.fecha_inicio, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.fecha_inicio, "", new { @class = "text-danger" })
        </div>
        <script>
            const elem_fecha_inicio = document.querySelector('input[name="fecha_inicio"]');
            const datepicker_fecha_inicio = new Datepicker(elem_fecha_inicio, {
                format: "yyyy/mm/dd"
            });
        </script>
    </div>

    <div class="form-group mb-3">
        @Html.LabelFor(model => model.fecha_fin, "Fecha Fin", htmlAttributes: new { @class = "control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.fecha_fin, new { htmlAttributes = new { @class = "form-control", autocomplete = "off" } })
            @Html.ValidationMessageFor(model => model.fecha_fin, "", new { @class = "text-danger" })
        </div>
        <script>
            const elem_fecha_fin = document.querySelector('input[name="fecha_fin"]');
            const datepicker_fecha_fin = new Datepicker(elem_fecha_fin, {
                format: "yyyy/mm/dd"
            });
        </script>
    </div>

    <div class="form-group mb-3">
        @Html.LabelFor(model => model.descripcion, "Descripcion", htmlAttributes: new { @class = "control-label" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.descripcion, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.descripcion, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>*@

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Guardar" class="btn btn-success btn-lg input-block-level form-control mb-2" />
            @Html.ActionLink("Salir sin guardar", "Index", new { area = "" }, new { @class = "btn btn-danger btn-lg d-flex justify-content-center" })
        </div>
    </div>
</div>
}

@*<div>
    @Html.ActionLink("Back to List", "Index")
</div>*@

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
